name: .NET 6.x.x

on:
  pull_request:
    branches: ["development", "production"]

env:
  NUNIT_E2E_BIN: ${{ github.workspace }}/NUnit_E2E/bin/Release/net6.0/

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: "[actions/checkout@v3.6.0] Checkout the repository"
        uses: actions/checkout@v3.6.0
      # First, try to restore the zip cache
      - name: "[actions/cache@v2] Grabs a cache of the .NET build output zip to speed up builds"
        id: cache-zip
        uses: actions/cache@v2
        with:
          path: ${{ env.NUNIT_E2E_BIN }}/nunit-e2e-bin.zip
          key: ${{ runner.os }}-dotnet-build-zip-${{ hashFiles('**/QA_AUTOMATED_TEST.sln', '**/*.csproj', '**/*.cs') }}
      # If cache doesn't exist, build the project and zip the output
      - name: "[run] dotnet publish"
        if: steps.cache-zip.outputs.cache-hit != 'true'
        run: |
          dotnet publish NUnit_E2E/NUnit_E2E.csproj --configuration Release --output ${{ env.NUNIT_E2E_BIN }}
          cd ${{ env.NUNIT_E2E_BIN }}
          zip -r nunit-e2e-bin.zip .

  test:
    needs: build # This ensures that the test job will only run after the build job completes successfully
    runs-on: ubuntu-latest

    steps:
      - name: "[actions/cache@v2] Grabs a cache of the .NET build output zip to speed up builds"
        id: cache-zip-test
        uses: actions/cache@v2
        with:
          path: ${{ env.NUNIT_E2E_BIN }}/nunit-e2e-bin.zip
          key: ${{ runner.os }}-dotnet-build-zip-${{ hashFiles('**/QA_AUTOMATED_TEST.sln', '**/*.csproj', '**/*.cs') }}

      - name: "[run] Unzip binaries"
        run: |
          cd ${{ env.NUNIT_E2E_BIN }}
          unzip nunit-e2e-bin.zip

      - name: List directory contents
        if: always()
        run: |
          ls -al ${{ env.NUNIT_E2E_BIN }}

      - name: "[run] chmod +x on playwright.sh and node"
        run: |
          chmod +x ${{ env.NUNIT_E2E_BIN }}.playwright/node/linux-x64/playwright.sh
          chmod +x ${{ env.NUNIT_E2E_BIN }}.playwright/node/linux-x64/node

      - name: "[run] dotnet tool install --global Microsoft.Playwright.CLI"
        run: dotnet tool install --global Microsoft.Playwright.CLI

      - name: "[run] playwright install"
        run:  pwsh ${{ env.NUNIT_E2E_BIN }}playwright.ps1 install

      - name: "[coactions/setup-xvfb@v1][run] dotnet test --no-build"
        uses: coactions/setup-xvfb@v1
        with:
          run: dotnet test --no-build

      - name: "[run] Zip assets"
        if: always()
        run: |
          cd ${{ env.NUNIT_E2E_BIN }}assets/
          zip -r nunit-e2e-bin-assets.zip .

      - name: "[actions/upload-artifact@v2] Upload the test assets"
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: nunit-e2e-bin-assets-zipped
          path: ${{ env.NUNIT_E2E_BIN }}assets/nunit-e2e-bin-assets.zip
